### This file was generated by Nexus Schema
### Do not make changes to this file directly


type auth {
  token: String!
  user: user!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

scalar DateTime

type exercise {
  id: Int!
  label: String!
  name: String!
}

type exercise_instance {
  duration: Float
  exercise: exercise!
  exercise_session: exercise_session!
  id: Int!
  repetitions: Int
  weight: Float
}

input exercise_instanceCreateManyWithoutExercise_sessionInput {
  connect: [exercise_instanceWhereUniqueInput!]
  create: [exercise_instanceCreateWithoutExercise_sessionInput!]
}

input exercise_instanceCreateWithoutExercise_sessionInput {
  duration: Float
  exercise: exerciseCreateOneWithoutExercise_instanceInput!
  repetitions: Int
  weight: Float
}

input exercise_instanceCreateWithoutExerciseInput {
  duration: Float
  exercise_session: exercise_sessionCreateOneWithoutExercise_instanceInput!
  repetitions: Int
  weight: Float
}

input exercise_instanceFilter {
  every: exercise_instanceWhereInput
  none: exercise_instanceWhereInput
  some: exercise_instanceWhereInput
}

input exercise_instanceScalarWhereInput {
  AND: [exercise_instanceScalarWhereInput!]
  duration: NullableFloatFilter
  exerciseId: IntFilter
  id: IntFilter
  NOT: [exercise_instanceScalarWhereInput!]
  OR: [exercise_instanceScalarWhereInput!]
  repetitions: NullableIntFilter
  sessionId: IntFilter
  weight: NullableFloatFilter
}

input exercise_instanceUpdateInput {
  duration: Float
  exercise: exerciseUpdateOneRequiredWithoutExercise_instanceInput
  exercise_session: exercise_sessionUpdateOneRequiredWithoutExercise_instanceInput
  repetitions: Int
  weight: Float
}

input exercise_instanceUpdateManyDataInput {
  duration: Float
  repetitions: Int
  weight: Float
}

input exercise_instanceUpdateManyWithoutExercise_sessionInput {
  connect: [exercise_instanceWhereUniqueInput!]
  create: [exercise_instanceCreateWithoutExercise_sessionInput!]
  delete: [exercise_instanceWhereUniqueInput!]
  deleteMany: [exercise_instanceScalarWhereInput!]
  disconnect: [exercise_instanceWhereUniqueInput!]
  set: [exercise_instanceWhereUniqueInput!]
  update: [exercise_instanceUpdateWithWhereUniqueWithoutExercise_sessionInput!]
  updateMany: [exercise_instanceUpdateManyWithWhereNestedInput!]
  upsert: [exercise_instanceUpsertWithWhereUniqueWithoutExercise_sessionInput!]
}

input exercise_instanceUpdateManyWithoutExerciseInput {
  connect: [exercise_instanceWhereUniqueInput!]
  create: [exercise_instanceCreateWithoutExerciseInput!]
  delete: [exercise_instanceWhereUniqueInput!]
  deleteMany: [exercise_instanceScalarWhereInput!]
  disconnect: [exercise_instanceWhereUniqueInput!]
  set: [exercise_instanceWhereUniqueInput!]
  update: [exercise_instanceUpdateWithWhereUniqueWithoutExerciseInput!]
  updateMany: [exercise_instanceUpdateManyWithWhereNestedInput!]
  upsert: [exercise_instanceUpsertWithWhereUniqueWithoutExerciseInput!]
}

input exercise_instanceUpdateManyWithWhereNestedInput {
  data: exercise_instanceUpdateManyDataInput!
  where: exercise_instanceScalarWhereInput!
}

input exercise_instanceUpdateWithoutExercise_sessionDataInput {
  duration: Float
  exercise: exerciseUpdateOneRequiredWithoutExercise_instanceInput
  repetitions: Int
  weight: Float
}

input exercise_instanceUpdateWithoutExerciseDataInput {
  duration: Float
  exercise_session: exercise_sessionUpdateOneRequiredWithoutExercise_instanceInput
  repetitions: Int
  weight: Float
}

input exercise_instanceUpdateWithWhereUniqueWithoutExercise_sessionInput {
  data: exercise_instanceUpdateWithoutExercise_sessionDataInput!
  where: exercise_instanceWhereUniqueInput!
}

input exercise_instanceUpdateWithWhereUniqueWithoutExerciseInput {
  data: exercise_instanceUpdateWithoutExerciseDataInput!
  where: exercise_instanceWhereUniqueInput!
}

input exercise_instanceUpsertWithWhereUniqueWithoutExercise_sessionInput {
  create: exercise_instanceCreateWithoutExercise_sessionInput!
  update: exercise_instanceUpdateWithoutExercise_sessionDataInput!
  where: exercise_instanceWhereUniqueInput!
}

input exercise_instanceUpsertWithWhereUniqueWithoutExerciseInput {
  create: exercise_instanceCreateWithoutExerciseInput!
  update: exercise_instanceUpdateWithoutExerciseDataInput!
  where: exercise_instanceWhereUniqueInput!
}

input exercise_instanceWhereInput {
  AND: [exercise_instanceWhereInput!]
  duration: NullableFloatFilter
  exercise: exerciseWhereInput
  exercise_session: exercise_sessionWhereInput
  exerciseId: IntFilter
  id: IntFilter
  NOT: [exercise_instanceWhereInput!]
  OR: [exercise_instanceWhereInput!]
  repetitions: NullableIntFilter
  sessionId: IntFilter
  weight: NullableFloatFilter
}

input exercise_instanceWhereUniqueInput {
  id: Int
}

type exercise_session {
  exercise_instance(after: exercise_instanceWhereUniqueInput, before: exercise_instanceWhereUniqueInput, first: Int, last: Int): [exercise_instance!]!
  id: Int!
  note: String
  timestamp: DateTime
  user: user!
}

input exercise_sessionCreateManyWithoutUserInput {
  connect: [exercise_sessionWhereUniqueInput!]
  create: [exercise_sessionCreateWithoutUserInput!]
}

input exercise_sessionCreateOneWithoutExercise_instanceInput {
  connect: exercise_sessionWhereUniqueInput
  create: exercise_sessionCreateWithoutExercise_instanceInput
}

input exercise_sessionCreateWithoutExercise_instanceInput {
  note: String
  timestamp: DateTime
  user: userCreateOneWithoutExercise_sessionInput!
}

input exercise_sessionCreateWithoutUserInput {
  exercise_instance: exercise_instanceCreateManyWithoutExercise_sessionInput
  note: String
  timestamp: DateTime
}

input exercise_sessionFilter {
  every: exercise_sessionWhereInput
  none: exercise_sessionWhereInput
  some: exercise_sessionWhereInput
}

input exercise_sessionScalarWhereInput {
  AND: [exercise_sessionScalarWhereInput!]
  exercise_instance: exercise_instanceFilter
  id: IntFilter
  NOT: [exercise_sessionScalarWhereInput!]
  note: NullableStringFilter
  OR: [exercise_sessionScalarWhereInput!]
  timestamp: NullableDateTimeFilter
  userId: IntFilter
}

input exercise_sessionUpdateInput {
  exercise_instance: exercise_instanceUpdateManyWithoutExercise_sessionInput
  note: String
  timestamp: DateTime
  user: userUpdateOneRequiredWithoutExercise_sessionInput
}

input exercise_sessionUpdateManyDataInput {
  note: String
  timestamp: DateTime
}

input exercise_sessionUpdateManyWithoutUserInput {
  connect: [exercise_sessionWhereUniqueInput!]
  create: [exercise_sessionCreateWithoutUserInput!]
  delete: [exercise_sessionWhereUniqueInput!]
  deleteMany: [exercise_sessionScalarWhereInput!]
  disconnect: [exercise_sessionWhereUniqueInput!]
  set: [exercise_sessionWhereUniqueInput!]
  update: [exercise_sessionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [exercise_sessionUpdateManyWithWhereNestedInput!]
  upsert: [exercise_sessionUpsertWithWhereUniqueWithoutUserInput!]
}

input exercise_sessionUpdateManyWithWhereNestedInput {
  data: exercise_sessionUpdateManyDataInput!
  where: exercise_sessionScalarWhereInput!
}

input exercise_sessionUpdateOneRequiredWithoutExercise_instanceInput {
  connect: exercise_sessionWhereUniqueInput
  create: exercise_sessionCreateWithoutExercise_instanceInput
  update: exercise_sessionUpdateWithoutExercise_instanceDataInput
  upsert: exercise_sessionUpsertWithoutExercise_instanceInput
}

input exercise_sessionUpdateWithoutExercise_instanceDataInput {
  note: String
  timestamp: DateTime
  user: userUpdateOneRequiredWithoutExercise_sessionInput
}

input exercise_sessionUpdateWithoutUserDataInput {
  exercise_instance: exercise_instanceUpdateManyWithoutExercise_sessionInput
  note: String
  timestamp: DateTime
}

input exercise_sessionUpdateWithWhereUniqueWithoutUserInput {
  data: exercise_sessionUpdateWithoutUserDataInput!
  where: exercise_sessionWhereUniqueInput!
}

input exercise_sessionUpsertWithoutExercise_instanceInput {
  create: exercise_sessionCreateWithoutExercise_instanceInput!
  update: exercise_sessionUpdateWithoutExercise_instanceDataInput!
}

input exercise_sessionUpsertWithWhereUniqueWithoutUserInput {
  create: exercise_sessionCreateWithoutUserInput!
  update: exercise_sessionUpdateWithoutUserDataInput!
  where: exercise_sessionWhereUniqueInput!
}

input exercise_sessionWhereInput {
  AND: [exercise_sessionWhereInput!]
  exercise_instance: exercise_instanceFilter
  id: IntFilter
  NOT: [exercise_sessionWhereInput!]
  note: NullableStringFilter
  OR: [exercise_sessionWhereInput!]
  timestamp: NullableDateTimeFilter
  user: userWhereInput
  userId: IntFilter
}

input exercise_sessionWhereUniqueInput {
  id: Int
}

input exerciseCreateOneWithoutExercise_instanceInput {
  connect: exerciseWhereUniqueInput
  create: exerciseCreateWithoutExercise_instanceInput
}

input exerciseCreateWithoutExercise_instanceInput {
  label: String!
  name: String!
}

input exerciseUpdateInput {
  exercise_instance: exercise_instanceUpdateManyWithoutExerciseInput
  label: String
  name: String
}

input exerciseUpdateOneRequiredWithoutExercise_instanceInput {
  connect: exerciseWhereUniqueInput
  create: exerciseCreateWithoutExercise_instanceInput
  update: exerciseUpdateWithoutExercise_instanceDataInput
  upsert: exerciseUpsertWithoutExercise_instanceInput
}

input exerciseUpdateWithoutExercise_instanceDataInput {
  label: String
  name: String
}

input exerciseUpsertWithoutExercise_instanceInput {
  create: exerciseCreateWithoutExercise_instanceInput!
  update: exerciseUpdateWithoutExercise_instanceDataInput!
}

input exerciseWhereInput {
  AND: [exerciseWhereInput!]
  exercise_instance: exercise_instanceFilter
  id: IntFilter
  label: StringFilter
  name: StringFilter
  NOT: [exerciseWhereInput!]
  OR: [exerciseWhereInput!]
}

input exerciseWhereUniqueInput {
  id: Int
  name: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type message {
  id: Int!
  message: String!
  timestamp: DateTime
  user: user!
  userId: Int!
}

input messageCreateManyWithoutUserInput {
  connect: [messageWhereUniqueInput!]
  create: [messageCreateWithoutUserInput!]
}

input messageCreateWithoutUserInput {
  message: String!
  timestamp: DateTime
}

input messageFilter {
  every: messageWhereInput
  none: messageWhereInput
  some: messageWhereInput
}

input messageScalarWhereInput {
  AND: [messageScalarWhereInput!]
  id: IntFilter
  message: StringFilter
  NOT: [messageScalarWhereInput!]
  OR: [messageScalarWhereInput!]
  timestamp: NullableDateTimeFilter
  userId: IntFilter
}

input messageUpdateInput {
  message: String
  timestamp: DateTime
  user: userUpdateOneRequiredWithoutMessageInput
}

input messageUpdateManyDataInput {
  message: String
  timestamp: DateTime
}

input messageUpdateManyWithoutUserInput {
  connect: [messageWhereUniqueInput!]
  create: [messageCreateWithoutUserInput!]
  delete: [messageWhereUniqueInput!]
  deleteMany: [messageScalarWhereInput!]
  disconnect: [messageWhereUniqueInput!]
  set: [messageWhereUniqueInput!]
  update: [messageUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [messageUpdateManyWithWhereNestedInput!]
  upsert: [messageUpsertWithWhereUniqueWithoutUserInput!]
}

input messageUpdateManyWithWhereNestedInput {
  data: messageUpdateManyDataInput!
  where: messageScalarWhereInput!
}

input messageUpdateWithoutUserDataInput {
  message: String
  timestamp: DateTime
}

input messageUpdateWithWhereUniqueWithoutUserInput {
  data: messageUpdateWithoutUserDataInput!
  where: messageWhereUniqueInput!
}

input messageUpsertWithWhereUniqueWithoutUserInput {
  create: messageCreateWithoutUserInput!
  update: messageUpdateWithoutUserDataInput!
  where: messageWhereUniqueInput!
}

input messageWhereInput {
  AND: [messageWhereInput!]
  id: IntFilter
  message: StringFilter
  NOT: [messageWhereInput!]
  OR: [messageWhereInput!]
  timestamp: NullableDateTimeFilter
  user: userWhereInput
  userId: IntFilter
}

input messageWhereUniqueInput {
  id: Int
}

type Mutation {
  createExercise(label: String, name: String): exercise!
  createExerciseInstance(duration: Float, exerciseId: Int!, repetitions: Int, sessionId: Int!, weight: Float): exercise_instance!
  createExerciseSession(note: String): exercise_session!
  createMessage(message: String): message!
  deleteOneexercise(where: exerciseWhereUniqueInput!): exercise
  deleteOneexercise_instance(where: exercise_instanceWhereUniqueInput!): exercise_instance
  deleteOneexercise_session(where: exercise_sessionWhereUniqueInput!): exercise_session
  deleteOnemessage(where: messageWhereUniqueInput!): message
  loginUser(email: String, password: String): auth!
  signupUser(email: String, name: String, password: String): auth!
  updateOneexercise(data: exerciseUpdateInput!, where: exerciseWhereUniqueInput!): exercise
  updateOneexercise_instance(data: exercise_instanceUpdateInput!, where: exercise_instanceWhereUniqueInput!): exercise_instance
  updateOneexercise_session(data: exercise_sessionUpdateInput!, where: exercise_sessionWhereUniqueInput!): exercise_session
  updateOnemessage(data: messageUpdateInput!, where: messageWhereUniqueInput!): message
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  exerciseInstances(sessionId: Int!): [exercise_instance!]!
  exercises: [exercise!]!
  exerciseSessions: [exercise_session!]!
  messages: [message!]!
  users: [user!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Subscription {
  messageAdded: message!
}

type user {
  email: String!
  id: Int!
  isAdmin: Boolean!
  name: String
}

input userCreateOneWithoutExercise_sessionInput {
  connect: userWhereUniqueInput
  create: userCreateWithoutExercise_sessionInput
}

input userCreateWithoutExercise_sessionInput {
  email: String!
  isAdmin: Boolean
  message: messageCreateManyWithoutUserInput
  name: String
  password: String!
}

input userCreateWithoutMessageInput {
  email: String!
  exercise_session: exercise_sessionCreateManyWithoutUserInput
  isAdmin: Boolean
  name: String
  password: String!
}

input userUpdateOneRequiredWithoutExercise_sessionInput {
  connect: userWhereUniqueInput
  create: userCreateWithoutExercise_sessionInput
  update: userUpdateWithoutExercise_sessionDataInput
  upsert: userUpsertWithoutExercise_sessionInput
}

input userUpdateOneRequiredWithoutMessageInput {
  connect: userWhereUniqueInput
  create: userCreateWithoutMessageInput
  update: userUpdateWithoutMessageDataInput
  upsert: userUpsertWithoutMessageInput
}

input userUpdateWithoutExercise_sessionDataInput {
  email: String
  isAdmin: Boolean
  message: messageUpdateManyWithoutUserInput
  name: String
  password: String
}

input userUpdateWithoutMessageDataInput {
  email: String
  exercise_session: exercise_sessionUpdateManyWithoutUserInput
  isAdmin: Boolean
  name: String
  password: String
}

input userUpsertWithoutExercise_sessionInput {
  create: userCreateWithoutExercise_sessionInput!
  update: userUpdateWithoutExercise_sessionDataInput!
}

input userUpsertWithoutMessageInput {
  create: userCreateWithoutMessageInput!
  update: userUpdateWithoutMessageDataInput!
}

input userWhereInput {
  AND: [userWhereInput!]
  email: StringFilter
  exercise_session: exercise_sessionFilter
  id: IntFilter
  isAdmin: BooleanFilter
  message: messageFilter
  name: NullableStringFilter
  NOT: [userWhereInput!]
  OR: [userWhereInput!]
  password: StringFilter
}

input userWhereUniqueInput {
  email: String
  id: Int
}
